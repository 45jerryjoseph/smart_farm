type Crop = record {
  id : nat64;
  updated_at : opt nat64;
  name : text;
  description : text;
  created_at : nat64;
  quantity : nat32;
};
type CropPayload = record { name : text; description : text; quantity : nat32 };
type Error = variant { NotFound : record { msg : text } };
type Expense = record {
  id : nat64;
  description : text;
  timestamp : nat64;
  amount : float64;
  crop_id : nat64;
};
type ExpensePayload = record {
  description : text;
  amount : float64;
  crop_id : nat64;
};
type Result = variant { Ok : vec Task; Err : Error };
type Result_1 = variant { Ok : float64; Err : Error };
type Result_2 = variant { Ok : Task; Err : Error };
type Result_3 = variant { Ok : vec text; Err : Error };
type Result_4 = variant { Ok : Expense; Err : Error };
type Result_5 = variant { Ok : text; Err : Error };
type Result_6 = variant { Ok : vec Crop; Err : Error };
type Result_7 = variant { Ok : vec Expense; Err : Error };
type Result_8 = variant { Ok : Crop; Err : Error };
type Result_9 = variant { Ok : nat64; Err : Error };
type Task = record {
  id : nat64;
  name : text;
  completed : bool;
  description : text;
  created_at : nat64;
  crop_id : nat64;
};
type TaskPayload = record { name : text; description : text; crop_id : nat64 };
service : {
  auto_assign_tasks : () -> (Result);
  calculate_budget : () -> (Result_1) query;
  complete_task : (nat64) -> (Result_2);
  create_crop : (CropPayload) -> (opt Crop);
  create_expense : (ExpensePayload) -> (opt Expense);
  create_task : (TaskPayload) -> (opt Task);
  crop_rotation_recommendations : (text) -> (Result_3) query;
  delete_expense : (nat64) -> (Result_4);
  delete_task : (nat64) -> (Result_2);
  expenses_per_crop : (nat64) -> (Result_1) query;
  generate_crop_report : (nat64) -> (Result_5) query;
  get_all_crops : () -> (Result_6) query;
  get_all_expenses : () -> (Result_7) query;
  get_all_tasks : () -> (Result) query;
  get_crop : (nat64) -> (Result_8) query;
  get_expense : (nat64) -> (Result_4) query;
  get_task : (nat64) -> (Result_2) query;
  monthly_expense_report : (nat64, nat64) -> (Result_1) query;
  predict_crop_yield : (nat64) -> (Result_9) query;
  search_crops : (text, opt nat32, opt record { nat64; nat64 }) -> (
      Result_6,
    ) query;
  update_crop : (nat64, CropPayload) -> (Result_8);
  update_expense : (nat64, ExpensePayload) -> (Result_4);
  update_task : (nat64, TaskPayload) -> (Result_2);
}
